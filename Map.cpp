#include "Map.h"
#include "Game.h"


int lvl1[20][25] = {
	//	1		//	2	   // 3		  // 4	     //	5
	{1,0,0,0,0, 0,0,0,0,0, 1,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0,}, // 1 
	{1,0,0,0,0, 0,0,0,0,0, 1,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0,}, // 2 
	{1,0,0,0,0, 0,0,0,0,0, 1,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0,}, // 3
	{1,0,0,0,0, 0,0,0,0,0, 1,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0,}, // 4
	{1,0,0,0,0, 0,0,0,0,0, 1,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0,}, // 5
	{1,0,0,0,0, 0,0,0,0,0, 2,2,2,2,2, 0,0,0,0,0, 0,0,0,0,0,}, // 1 
	{1,0,0,0,0, 0,0,0,0,0, 2,2,2,2,2, 0,0,0,0,0, 0,0,0,0,0,}, // 2 
	{1,0,0,0,0, 0,0,0,0,0, 2,2,2,2,2, 0,0,0,0,0, 0,0,0,0,0,}, // 3
	{1,0,0,0,0, 0,0,0,0,0, 2,2,2,2,2, 0,0,0,0,0, 0,0,0,0,0,}, // 4
	{1,0,0,0,0, 0,0,0,0,0, 2,2,2,2,2, 0,0,0,0,0, 0,0,0,0,0,}, // 5
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 1 
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 2 
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 3
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 4
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 5
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 1 
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 2 
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 3
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 4
	{1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,}, // 5
};

Map::Map() {
	water = IMG_LoadTexture(Game::gRenderer, "assets/water.png");
	grass = IMG_LoadTexture(Game::gRenderer, "assets/grass.png");
	dirt = IMG_LoadTexture(Game::gRenderer, "assets/dirt.png");
	src.x = src.y = 0;
	src.w = src.h = 32;
	dst.x = dst.y = 0;
	dst.w = dst.h = 32;
	for (int i = 0; i < 20; i++) 
	{
		for (int j = 0; j < 25; j++) 
		{
			map[i][j] = lvl1[i][j];
		}
	}
}

void Map::update()
{

}

void Map::render() {
	for (int row = 0; row < 20; row++) {
		for (int col = 0; col < 25; col++) {
			dst.x = col * 32;
			dst.y = row * 32;
			switch (map[row][col]) {
			case 0:
				SDL_RenderCopy(Game::gRenderer, water, &src, &dst);
				break;
			case 1:
				SDL_RenderCopy(Game::gRenderer, grass, &src, &dst);
				break;
			case 2:
				SDL_RenderCopy(Game::gRenderer, dirt, &src, &dst);
				break;
			default:
				break;
			}
		}
	}
}